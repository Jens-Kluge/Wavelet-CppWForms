#pragma once
#include <vector>
#include "DWT.h"

using namespace System;
using namespace System::Drawing;


/* used for padding an arbitrary signal to a
*  signal having a length of 2^n
*/
int nextpow2(int x);

int nearestpow10(int x);

//listbox selection
enum class enWavelets {

    Daubechies2,
    Daubechies3,
    Daubechies4,
    Daubechies5,
    Daubechies6,
    Daubechies7,
    Daubechies8,
    Daubechies9,
    Daubechies10,
    Symlet2,
    Symlet3,
    Symlet4,
    Symlet5,
    Symlet6,
    Symlet7,
    Symlet8,
    Coiflet1,
    Coiflet2,
    Coiflet3,
    Coiflet4,
    Coiflet5
};


enum enpadmode {
	end,
	begin,
	center
};
/*
* signal padding function
*/
std::vector<double> padsignal(std::vector<double> signal, int padmode = enpadmode::end);

Wavelet* GetWvlt(int iSelWvlt);
String^ GetWvltName(int iSelWvlt);

/* utilities in managed code*/
ref class Utilities
{
    //map a number between 0 and 1 into a rainbow color
    public: static Color RainbowNumberToColor(float number)
    {
        Byte r = 0, g = 0, b = 0;
        if (number < 1 / 6.0)
        {
            // Mostly red with some green.
            r = 255;
            g = (Byte)(r * (number - 0) / (2 / 6.0 - number));
        }
        else if (number < 2 / 6.0)
        {
            // Mostly green with some red.
            g = 255;
            r = (Byte)(g * (2 / 6.0 - number) / (number - 0));
        }
        else if (number < 3 / 6.0)
        {
            // Mostly green with some blue.
            g = 255;
            b = (Byte)(g * (2 / 6.0 - number) / (number - 4 / 6.0));
        }
        else if (number < 4 / 6.0)
        {
            // Mostly blue with some green.
            b = 255;
            g = (Byte)(b * (number - 4 / 6.0) / (2 / 6.0 - number));
        }
        else if (number < 5 / 6.0)
        {
            // Mostly blue with some red.
            b = 255;
            r = (Byte)(b * (4 / 6.0 - number) / (number - 1.0));
        }
        else
        {
            // Mostly red with some blue.
            r = 255;
            b = (Byte)(r * (number - 1.0) / (4 / 6.0 - number));
        }
        return Color::FromArgb(r, g, b);
    }

public: static String^ GetResourceName(String^ Name) {
      auto resourceAssembly = Reflection::Assembly::GetExecutingAssembly();
      // .Resources is the name generated by resxgen, e.g., from the input file name Resources.resx
      auto resourceName = resourceAssembly->GetName()->Name + ".Resources";
      auto resourceManager = gcnew Resources::ResourceManager(resourceName, resourceAssembly);
      auto String1 = cli::safe_cast<String^>(resourceManager->GetObject(Name));
      return String1;
}
};

